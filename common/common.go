package common

/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.0.23
 * apidoc:0.11.27 http://www.apidoc.me/flow/common/0.0.23/go_1_5_client
 */

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"strconv"
	"strings"
)

const BaseUrl = "https://api.flow.io"
const UserAgent = "apidoc:0.11.27 http://www.apidoc.me/flow/common/0.0.23/go_1_5_client"
const Version = "0.0.23"
const VersionMajor = 0

type Client struct {
	HttpClient *http.Client
	Username   string
	Password   string
	BaseUrl    string
}

type Calendar string

const (
	CalendarWeekdays Calendar  = "weekdays"  // Mon -    Fri
	CalendarEveryday           = "everyday"  // 7   days per week
	CalendarUNDEFINED          = "UNDEFINED"
)

func CalendarFromString(value string) Calendar {
	switch strings.TrimSpace(strings.ToLower(value)) {
	case "weekdays":
		return CalendarWeekdays
	case "everyday":
		return CalendarEveryday
	default:
		return CalendarUNDEFINED
	}
}

type Capability string

const (
	CapabilityCrossdock Capability  = "crossdock"
	CapabilityUNDEFINED             = "UNDEFINED"
)

func CapabilityFromString(value string) Capability {
	switch strings.TrimSpace(strings.ToLower(value)) {
	case "crossdock":
		return CapabilityCrossdock
	default:
		return CapabilityUNDEFINED
	}
}

type ChangeType string

const (
	ChangeTypeInsert ChangeType  = "insert"
	ChangeTypeUpdate             = "update"
	ChangeTypeDelete             = "delete"
	ChangeTypeUNDEFINED          = "UNDEFINED"
)

func ChangeTypeFromString(value string) ChangeType {
	switch strings.TrimSpace(strings.ToLower(value)) {
	case "insert":
		return ChangeTypeInsert
	case "update":
		return ChangeTypeUpdate
	case "delete":
		return ChangeTypeDelete
	default:
		return ChangeTypeUNDEFINED
	}
}

/**
 * Specifies the difference between product dimensions and the actual packaged
 * dimensions. This enables us to generate more accurate shipping estimates based
 * on the packaged dimensions. The common example is a scarf which may have product
 * dimensions of 6 feet long even though it can be folded to have very small
 * package dimensions.
 */
type DimensionType string

const (
	DimensionTypeProduct DimensionType  = "product"   // The standalone dimensions of an item.
	DimensionTypePackage                = "package"   // The boxed      dimensions of an item.
	DimensionTypeUNDEFINED              = "UNDEFINED"
)

func DimensionTypeFromString(value string) DimensionType {
	switch strings.TrimSpace(strings.ToLower(value)) {
	case "product":
		return DimensionTypeProduct
	case "package":
		return DimensionTypePackage
	default:
		return DimensionTypeUNDEFINED
	}
}

type ExceptionType string

const (
	ExceptionTypeOpen ExceptionType  = "open"
	ExceptionTypeClosed              = "closed"
	ExceptionTypeUNDEFINED           = "UNDEFINED"
)

func ExceptionTypeFromString(value string) ExceptionType {
	switch strings.TrimSpace(strings.ToLower(value)) {
	case "open":
		return ExceptionTypeOpen
	case "closed":
		return ExceptionTypeClosed
	default:
		return ExceptionTypeUNDEFINED
	}
}

type HolidayCalendar string

const (
	HolidayCalendarUsBankHolidays HolidayCalendar  = "us_bank_holidays"
	HolidayCalendarJewishHolidays                  = "jewish_holidays"
	HolidayCalendarUNDEFINED                       = "UNDEFINED"
)

func HolidayCalendarFromString(value string) HolidayCalendar {
	switch strings.TrimSpace(strings.ToLower(value)) {
	case "us_bank_holidays":
		return HolidayCalendarUsBankHolidays
	case "jewish_holidays":
		return HolidayCalendarJewishHolidays
	default:
		return HolidayCalendarUNDEFINED
	}
}

/**
 * Pending better name
 */
type ScheduleExceptionStatus string

const (
	ScheduleExceptionStatusOpen ScheduleExceptionStatus  = "Open"
	ScheduleExceptionStatusClosed                        = "Closed"
	ScheduleExceptionStatusUNDEFINED                     = "UNDEFINED"
)

func ScheduleExceptionStatusFromString(value string) ScheduleExceptionStatus {
	switch strings.TrimSpace(strings.ToLower(value)) {
	case "open":
		return ScheduleExceptionStatusOpen
	case "closed":
		return ScheduleExceptionStatusClosed
	default:
		return ScheduleExceptionStatusUNDEFINED
	}
}

type SortDirection string

const (
	SortDirectionAscending SortDirection  = "ascending"
	SortDirectionDescending               = "descending"
	SortDirectionUNDEFINED                = "UNDEFINED"
)

func SortDirectionFromString(value string) SortDirection {
	switch strings.TrimSpace(strings.ToLower(value)) {
	case "ascending":
		return SortDirectionAscending
	case "descending":
		return SortDirectionDescending
	default:
		return SortDirectionUNDEFINED
	}
}

/**
 * Defines the units of measurement that we support. As units are added, we conform
 * with the standard units provided by jscience as part of JSR 363 - see
 * http://jscience.org/api/javax/measure/unit/SI.html and
 * http://jscience.org/api/javax/measure/unit/NonSI.html
 */
type UnitOfMeasurement string

const (
	UnitOfMeasurementMillimeter UnitOfMeasurement  = "millimeter"  // Equivalent to     MILLI(METRE).
	UnitOfMeasurementCentimeter                    = "centimeter"  // Equivalent to     CENTI(METRE).
	UnitOfMeasurementInch                          = "inch"        // A          unit   of            length equal  to         0.01004   m     (standard    name     in).
	UnitOfMeasurementFoot                          = "foot"        // A          unit   of            length equal  to         0.3048    m     (standard    name     ft).
	UnitOfMeasurementCubicInch                     = "cubic_inch"  // A          unit   of            volume equal  to         one       cubic inch         (in³).
	UnitOfMeasurementCubicMeter                    = "cubic_meter" // The        metric unit          for    volume quantities (m³).
	UnitOfMeasurementGram                          = "gram"        // A          unit   of            mass   equal  to         1         /     1000         kilogram (standard name g).
	UnitOfMeasurementKilogram                      = "kilogram"    // The        base   unit          for    mass   quantities (kg).
	UnitOfMeasurementMeter                         = "meter"       // The        base   unit          for    length quantities (m).
	UnitOfMeasurementOunce                         = "ounce"       // A          unit   of            mass   equal  to         1         /     16           POUND    (standard name oz).
	UnitOfMeasurementPound                         = "pound"       // A          unit   of            mass   equal  to         453.59237 grams (avoirdupois pound,   standard  name lb).
	UnitOfMeasurementUNDEFINED                     = "UNDEFINED"
)

func UnitOfMeasurementFromString(value string) UnitOfMeasurement {
	switch strings.TrimSpace(strings.ToLower(value)) {
	case "millimeter":
		return UnitOfMeasurementMillimeter
	case "centimeter":
		return UnitOfMeasurementCentimeter
	case "inch":
		return UnitOfMeasurementInch
	case "foot":
		return UnitOfMeasurementFoot
	case "cubic_inch":
		return UnitOfMeasurementCubicInch
	case "cubic_meter":
		return UnitOfMeasurementCubicMeter
	case "gram":
		return UnitOfMeasurementGram
	case "kilogram":
		return UnitOfMeasurementKilogram
	case "meter":
		return UnitOfMeasurementMeter
	case "ounce":
		return UnitOfMeasurementOunce
	case "pound":
		return UnitOfMeasurementPound
	default:
		return UnitOfMeasurementUNDEFINED
	}
}

/**
 * Defines the units of time that we support. We confirm with the standard set of
 * units of time from
 * http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/TimeUnit.html
 */
type UnitOfTime string

const (
	UnitOfTimeDay UnitOfTime  = "day"
	UnitOfTimeHour            = "hour"
	UnitOfTimeMinute          = "minute"
	UnitOfTimeUNDEFINED       = "UNDEFINED"
)

func UnitOfTimeFromString(value string) UnitOfTime {
	switch strings.TrimSpace(strings.ToLower(value)) {
	case "day":
		return UnitOfTimeDay
	case "hour":
		return UnitOfTimeHour
	case "minute":
		return UnitOfTimeMinute
	default:
		return UnitOfTimeUNDEFINED
	}
}

type ValueAddedService string

const (
	ValueAddedServiceHazardousMaterial ValueAddedService  = "Hazardous  Material" // See https://en.wikipedia.org/wiki/ORM-D
	ValueAddedServiceUNDEFINED                            = "UNDEFINED"
)

func ValueAddedServiceFromString(value string) ValueAddedService {
	switch strings.TrimSpace(strings.ToLower(value)) {
	case "hazardous material":
		return ValueAddedServiceHazardousMaterial
	default:
		return ValueAddedServiceUNDEFINED
	}
}

type Visibility string

const (
	VisibilityPublic Visibility  = "public"
	VisibilityPrivate            = "private"
	VisibilityUNDEFINED          = "UNDEFINED"
)

func VisibilityFromString(value string) Visibility {
	switch strings.TrimSpace(strings.ToLower(value)) {
	case "public":
		return VisibilityPublic
	case "private":
		return VisibilityPrivate
	default:
		return VisibilityUNDEFINED
	}
}

/**
 * Defines structured fields for a contact person. Typically used for specifying
 * contact person for an account, shipment, or organization representative
 */
type Contact struct {
	Name  Name   `json:"name"`
	Email string `json:"email,omitempty"`
	Phone string `json:"phone,omitempty"`
}

func ContactFromMap(data interface{}) Contact {
	b, err := json.Marshal(data)
	if err == nil {
		return ContactFromJson(bytes.NewReader(b))
	} else {
		panic(err)
	}
}

func ContactFromJson(bytes io.Reader) Contact {
	var contact Contact
	json.NewDecoder(bytes).Decode(&contact)
	return contact
}

type DatetimeRange struct {
	From string `json:"from"`
	To   string `json:"to"`
}

func DatetimeRangeFromMap(data interface{}) DatetimeRange {
	b, err := json.Marshal(data)
	if err == nil {
		return DatetimeRangeFromJson(bytes.NewReader(b))
	} else {
		panic(err)
	}
}

func DatetimeRangeFromJson(bytes io.Reader) DatetimeRange {
	var datetimeRange DatetimeRange
	json.NewDecoder(bytes).Decode(&datetimeRange)
	return datetimeRange
}

type Dimension struct {
	Type   DimensionType `json:"type"`
	Depth  Measurement   `json:"depth,omitempty"`
	Length Measurement   `json:"length,omitempty"`
	Weight Measurement   `json:"weight,omitempty"`
	Width  Measurement   `json:"width,omitempty"`
}

func DimensionFromMap(data interface{}) Dimension {
	b, err := json.Marshal(data)
	if err == nil {
		return DimensionFromJson(bytes.NewReader(b))
	} else {
		panic(err)
	}
}

func DimensionFromJson(bytes io.Reader) Dimension {
	var dimension Dimension
	json.NewDecoder(bytes).Decode(&dimension)
	return dimension
}

type Error struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func ErrorFromMap(data interface{}) Error {
	b, err := json.Marshal(data)
	if err == nil {
		return ErrorFromJson(bytes.NewReader(b))
	} else {
		panic(err)
	}
}

func ErrorFromJson(bytes io.Reader) Error {
	var error_ Error
	json.NewDecoder(bytes).Decode(&error_)
	return error_
}

/**
 * Represents an exception to the schedule of a location.
 */
type Exception struct {
	Type          ExceptionType `json:"type"`
	DatetimeRange DatetimeRange `json:"datetime_range"`
}

func ExceptionFromMap(data interface{}) Exception {
	b, err := json.Marshal(data)
	if err == nil {
		return ExceptionFromJson(bytes.NewReader(b))
	} else {
		panic(err)
	}
}

func ExceptionFromJson(bytes io.Reader) Exception {
	var exception Exception
	json.NewDecoder(bytes).Decode(&exception)
	return exception
}

/**
 * Some important fields related to experiences used in various APIs
 */
type ExperienceSummary struct {
	Id       string `json:"id"`
	Key      string `json:"key"`
	Name     string `json:"name"`
	Currency string `json:"currency,omitempty"`
	Country  string `json:"country,omitempty"`
}

func ExperienceSummaryFromMap(data interface{}) ExperienceSummary {
	b, err := json.Marshal(data)
	if err == nil {
		return ExperienceSummaryFromJson(bytes.NewReader(b))
	} else {
		panic(err)
	}
}

func ExperienceSummaryFromJson(bytes io.Reader) ExperienceSummary {
	var experienceSummary ExperienceSummary
	json.NewDecoder(bytes).Decode(&experienceSummary)
	return experienceSummary
}

type Healthcheck struct {
	Status string `json:"status"`
}

func HealthcheckFromMap(data interface{}) Healthcheck {
	b, err := json.Marshal(data)
	if err == nil {
		return HealthcheckFromJson(bytes.NewReader(b))
	} else {
		panic(err)
	}
}

func HealthcheckFromJson(bytes io.Reader) Healthcheck {
	var healthcheck Healthcheck
	json.NewDecoder(bytes).Decode(&healthcheck)
	return healthcheck
}

/**
 * Defines structured fields for address to be used in user/form input. Either text
 * or the structured input needs to be present.
 */
type Location struct {
	Text      string   `json:"text,omitempty"`
	Streets   []string `json:"streets,omitempty"`
	City      string   `json:"city,omitempty"`
	Province  string   `json:"province,omitempty"`
	Postal    string   `json:"postal,omitempty"`
	Country   string   `json:"country,omitempty"`
	Latitude  string   `json:"latitude,omitempty"`
	Longitude string   `json:"longitude,omitempty"`
}

func LocationFromMap(data interface{}) Location {
	b, err := json.Marshal(data)
	if err == nil {
		return LocationFromJson(bytes.NewReader(b))
	} else {
		panic(err)
	}
}

func LocationFromJson(bytes io.Reader) Location {
	var location Location
	json.NewDecoder(bytes).Decode(&location)
	return location
}

type LocationReference struct {
	Text string `json:"text,omitempty"`
}

func LocationReferenceFromMap(data interface{}) LocationReference {
	b, err := json.Marshal(data)
	if err == nil {
		return LocationReferenceFromJson(bytes.NewReader(b))
	} else {
		panic(err)
	}
}

func LocationReferenceFromJson(bytes io.Reader) LocationReference {
	var locationReference LocationReference
	json.NewDecoder(bytes).Decode(&locationReference)
	return locationReference
}

type Measurement struct {
	Value string            `json:"value"`
	Units UnitOfMeasurement `json:"units"`
}

func MeasurementFromMap(data interface{}) Measurement {
	b, err := json.Marshal(data)
	if err == nil {
		return MeasurementFromJson(bytes.NewReader(b))
	} else {
		panic(err)
	}
}

func MeasurementFromJson(bytes io.Reader) Measurement {
	var measurement Measurement
	json.NewDecoder(bytes).Decode(&measurement)
	return measurement
}

type Name struct {
	First string `json:"first,omitempty"`
	Last  string `json:"last,omitempty"`
}

func NameFromMap(data interface{}) Name {
	b, err := json.Marshal(data)
	if err == nil {
		return NameFromJson(bytes.NewReader(b))
	} else {
		panic(err)
	}
}

func NameFromJson(bytes io.Reader) Name {
	var name Name
	json.NewDecoder(bytes).Decode(&name)
	return name
}

/**
 * Represents a single organization in the system
 */
type Organization struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

func OrganizationFromMap(data interface{}) Organization {
	b, err := json.Marshal(data)
	if err == nil {
		return OrganizationFromJson(bytes.NewReader(b))
	} else {
		panic(err)
	}
}

func OrganizationFromJson(bytes io.Reader) Organization {
	var organization Organization
	json.NewDecoder(bytes).Decode(&organization)
	return organization
}

type OrganizationReference struct {
	Id string `json:"id"`
}

func OrganizationReferenceFromMap(data interface{}) OrganizationReference {
	b, err := json.Marshal(data)
	if err == nil {
		return OrganizationReferenceFromJson(bytes.NewReader(b))
	} else {
		panic(err)
	}
}

func OrganizationReferenceFromJson(bytes io.Reader) OrganizationReference {
	var organizationReference OrganizationReference
	json.NewDecoder(bytes).Decode(&organizationReference)
	return organizationReference
}

type OrganizationSummary struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

func OrganizationSummaryFromMap(data interface{}) OrganizationSummary {
	b, err := json.Marshal(data)
	if err == nil {
		return OrganizationSummaryFromJson(bytes.NewReader(b))
	} else {
		panic(err)
	}
}

func OrganizationSummaryFromJson(bytes io.Reader) OrganizationSummary {
	var organizationSummary OrganizationSummary
	json.NewDecoder(bytes).Decode(&organizationSummary)
	return organizationSummary
}

/**
 * Represents operating calendar and holidays of a location
 */
type Schedule struct {
	Calendar  Calendar        `json:"calendar,omitempty"`
	Holiday   HolidayCalendar `json:"holiday"`
	Exception []Exception     `json:"exception"`
	Cutoff    string          `json:"cutoff,omitempty"`
}

func ScheduleFromMap(data interface{}) Schedule {
	b, err := json.Marshal(data)
	if err == nil {
		return ScheduleFromJson(bytes.NewReader(b))
	} else {
		panic(err)
	}
}

func ScheduleFromJson(bytes io.Reader) Schedule {
	var schedule Schedule
	json.NewDecoder(bytes).Decode(&schedule)
	return schedule
}

/**
 * Represents a single user in the system
 */
type User struct {
	Id    string `json:"id"`
	Email string `json:"email,omitempty"`
	Name  Name   `json:"name"`
}

func UserFromMap(data interface{}) User {
	b, err := json.Marshal(data)
	if err == nil {
		return UserFromJson(bytes.NewReader(b))
	} else {
		panic(err)
	}
}

func UserFromJson(bytes io.Reader) User {
	var user User
	json.NewDecoder(bytes).Decode(&user)
	return user
}

type UserReference struct {
	Id string `json:"id"`
}

func UserReferenceFromMap(data interface{}) UserReference {
	b, err := json.Marshal(data)
	if err == nil {
		return UserReferenceFromJson(bytes.NewReader(b))
	} else {
		panic(err)
	}
}

func UserReferenceFromJson(bytes io.Reader) UserReference {
	var userReference UserReference
	json.NewDecoder(bytes).Decode(&userReference)
	return userReference
}

type UserSummary struct {
	Id    string `json:"id"`
	Email string `json:"email,omitempty"`
	Name  string `json:"name"`
}

func UserSummaryFromMap(data interface{}) UserSummary {
	b, err := json.Marshal(data)
	if err == nil {
		return UserSummaryFromJson(bytes.NewReader(b))
	} else {
		panic(err)
	}
}

func UserSummaryFromJson(bytes io.Reader) UserSummary {
	var userSummary UserSummary
	json.NewDecoder(bytes).Decode(&userSummary)
	return userSummary
}

type ExpandableLocation struct {
	Location          Location
	LocationReference LocationReference
	Undefined         string
}

func ExpandableLocationFromMap(data interface{}) ExpandableLocation {
	b, err := json.Marshal(data)
	if err == nil {
		return ExpandableLocationFromJson(bytes.NewReader(b))
	} else {
		panic(err)
	}
}

func ExpandableLocationFromJson(bytes io.Reader) ExpandableLocation {
	var el map[string]interface{}
	json.NewDecoder(bytes).Decode(&el)
	switch el["discriminator"] {
	case "location":
		return ExpandableLocation{Location: LocationFromMap(el)}
	case "location_reference":
		return ExpandableLocation{LocationReference: LocationReferenceFromMap(el)}
	default:
		return ExpandableLocation{Undefined: el["discriminator"].(string)}
	}
}

type ExpandableOrganization struct {
	Organization          Organization
	OrganizationReference OrganizationReference
	Undefined             string
}

func ExpandableOrganizationFromMap(data interface{}) ExpandableOrganization {
	b, err := json.Marshal(data)
	if err == nil {
		return ExpandableOrganizationFromJson(bytes.NewReader(b))
	} else {
		panic(err)
	}
}

func ExpandableOrganizationFromJson(bytes io.Reader) ExpandableOrganization {
	var el map[string]interface{}
	json.NewDecoder(bytes).Decode(&el)
	switch el["discriminator"] {
	case "organization":
		return ExpandableOrganization{Organization: OrganizationFromMap(el)}
	case "organization_reference":
		return ExpandableOrganization{OrganizationReference: OrganizationReferenceFromMap(el)}
	default:
		return ExpandableOrganization{Undefined: el["discriminator"].(string)}
	}
}

type ExpandableUser struct {
	User          User
	UserReference UserReference
	Undefined     string
}

func ExpandableUserFromMap(data interface{}) ExpandableUser {
	b, err := json.Marshal(data)
	if err == nil {
		return ExpandableUserFromJson(bytes.NewReader(b))
	} else {
		panic(err)
	}
}

func ExpandableUserFromJson(bytes io.Reader) ExpandableUser {
	var el map[string]interface{}
	json.NewDecoder(bytes).Decode(&el)
	switch el["discriminator"] {
	case "user":
		return ExpandableUser{User: UserFromMap(el)}
	case "user_reference":
		return ExpandableUser{UserReference: UserReferenceFromMap(el)}
	default:
		return ExpandableUser{Undefined: el["discriminator"].(string)}
	}
}

type HealthchecksGetHealthcheckResponse struct {
	StatusCode  int
	Response    *http.Response
	Error       error
	ErrorS      []Error
	Healthcheck Healthcheck
}

func HealthchecksGetHealthcheck(client Client) HealthchecksGetHealthcheckResponse {

	requestUrl := fmt.Sprintf("%s/_internal_/healthcheck", client.BaseUrl)

	request, err := buildRequest(client, "GET", requestUrl)
	if err != nil {
		return HealthchecksGetHealthcheckResponse{Error: err}
	}

	resp, err := client.HttpClient.Do(request)
	if err != nil {
		return HealthchecksGetHealthcheckResponse{Error: err}
	}
	defer resp.Body.Close()

	switch resp.StatusCode {
	case 200:
		return HealthchecksGetHealthcheckResponse{StatusCode: resp.StatusCode, Response: resp, Healthcheck: HealthcheckFromJson(resp.Body)}

	case 422:
		return HealthchecksGetHealthcheckResponse{StatusCode: resp.StatusCode, Response: resp, ErrorS: func() []Error {
			var tmp []interface{}
			json.NewDecoder(resp.Body).Decode(&tmp)
			var all []Error
			for _, el := range tmp {
				all = append(all, ErrorFromMap(el))
			}
			return all
		}()}

	default:
		return HealthchecksGetHealthcheckResponse{StatusCode: resp.StatusCode, Response: resp, Error: errors.New(resp.Status)}
	}

}

func buildRequest(client Client, method, urlStr string) (*http.Request, error) {

	request, err := http.NewRequest(method, urlStr, nil)
	if err != nil {
		return nil, err
	}

	request.Header = map[string][]string{
		"User-Agent":             {UserAgent},
		"X-Apidoc-Version":       {Version},
		"X-Apidoc-Version-Major": {strconv.Itoa(VersionMajor)},
	}

	if client.Username != "" {
		request.SetBasicAuth(client.Username, client.Password)
	}

	return request, nil

}
